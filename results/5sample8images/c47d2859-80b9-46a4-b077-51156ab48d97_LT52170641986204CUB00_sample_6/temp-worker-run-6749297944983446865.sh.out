Image file name is LT52170641986204CUB00
Untaring image LT52170641986204CUB00
LT52170641986204CUB00_B1.TIF
LT52170641986204CUB00_B2.TIF
LT52170641986204CUB00_B3.TIF
LT52170641986204CUB00_B4.TIF
LT52170641986204CUB00_B5.TIF
LT52170641986204CUB00_B6.TIF
LT52170641986204CUB00_B7.TIF
LT52170641986204CUB00_GCP.txt
LT52170641986204CUB00_MTL.txt
LT52170641986204CUB00_VER.jpg
LT52170641986204CUB00_VER.txt
README.GTF
Creating image output directory
Listening for transport dt_socket at address: 4000
2017-03-12 09:34:08 INFO  RWrapper:131 - Pre processing pixels...
2017-03-12 09:34:12 DEBUG SEBALHelper:93 - Boundingbox UTM coordinates: [(easting=671589, northing=-702301), (easting=854630, northing=-729763), (easting=817723, northing=-897964), (easting=634737, northing=-870364)]
2017-03-12 09:34:12 DEBUG SEBALHelper:111 - ULx=320100.0
2017-03-12 09:34:12 DEBUG SEBALHelper:112 - ULy=-535200.0
2017-03-12 09:34:12 DEBUG SEBALHelper:114 - x0=634737.0
2017-03-12 09:34:12 DEBUG SEBALHelper:115 - y0=-702301.0
2017-03-12 09:34:12 DEBUG SEBALHelper:117 - x1=854630.0
2017-03-12 09:34:12 DEBUG SEBALHelper:118 - y1=-897964.0
2017-03-12 09:34:12 DEBUG RWrapper:139 - bounding_box: X=10487 - Y=5570
2017-03-12 09:34:12 DEBUG RWrapper:140 - bounding_box: W=7329 - H=6522
2017-03-12 09:34:13 ERROR WeatherStation:166 - Setting URL http://www.inmet.gov.br/projetos/rede/pesquisa/gera_serie_txt.php?&mRelEstacao=82689&btnProcesso=serie&mRelDtInicio=23-07-1986&mRelDtFim=23-07-1986&mAtributos=1,1,,,1,1,,1,1,,,,,,,, as FAILED.
2017-03-12 09:34:13 ERROR WeatherStation:166 - Setting URL http://www.inmet.gov.br/projetos/rede/pesquisa/gera_serie_txt.php?&mRelEstacao=82590&btnProcesso=serie&mRelDtInicio=23-07-1986&mRelDtFim=23-07-1986&mAtributos=1,1,,,1,1,,1,1,,,,,,,, as FAILED.
2017-03-12 09:34:14 ERROR WeatherStation:166 - Setting URL http://www.inmet.gov.br/projetos/rede/pesquisa/gera_serie_txt.php?&mRelEstacao=82791&btnProcesso=serie&mRelDtInicio=23-07-1986&mRelDtFim=23-07-1986&mAtributos=1,1,,,1,1,,1,1,,,,,,,, as FAILED.
2017-03-12 09:34:14 ERROR WeatherStation:166 - Setting URL http://www.inmet.gov.br/projetos/rede/pesquisa/gera_serie_txt.php?&mRelEstacao=82690&btnProcesso=serie&mRelDtInicio=23-07-1986&mRelDtFim=23-07-1986&mAtributos=1,1,,,1,1,,1,1,,,,,,,, as FAILED.
2017-03-12 09:34:14 ERROR WeatherStation:166 - Setting URL http://www.inmet.gov.br/projetos/rede/pesquisa/gera_serie_txt.php?&mRelEstacao=82686&btnProcesso=serie&mRelDtInicio=23-07-1986&mRelDtFim=23-07-1986&mAtributos=1,1,,,1,1,,1,1,,,,,,,, as FAILED.
2017-03-12 09:34:14 ERROR WeatherStation:166 - Setting URL http://www.inmet.gov.br/projetos/rede/pesquisa/gera_serie_txt.php?&mRelEstacao=82789&btnProcesso=serie&mRelDtInicio=23-07-1986&mRelDtFim=23-07-1986&mAtributos=1,1,,,1,1,,1,1,,,,,,,, as FAILED.
2017-03-12 09:34:14 ERROR WeatherStation:166 - Setting URL http://www.inmet.gov.br/projetos/rede/pesquisa/gera_serie_txt.php?&mRelEstacao=82784&btnProcesso=serie&mRelDtInicio=23-07-1986&mRelDtFim=23-07-1986&mAtributos=1,1,,,1,1,,1,1,,,,,,,, as FAILED.
2017-03-12 09:34:15 ERROR WeatherStation:166 - Setting URL http://www.inmet.gov.br/projetos/rede/pesquisa/gera_serie_txt.php?&mRelEstacao=82691&btnProcesso=serie&mRelDtInicio=23-07-1986&mRelDtFim=23-07-1986&mAtributos=1,1,,,1,1,,1,1,,,,,,,, as FAILED.
2017-03-12 09:34:15 DEBUG RWrapper:146 - stationData: 82588;23/07/1986;0000;24.2;21.6;80;1012.1;9;1.3;
82588;23/07/1986;1200;27.3;20.7;55;1013.9;14;4.1;
82588;23/07/1986;1800;30.9;22.4;49;1009.9;14;2.3;
2017-03-12 09:34:15 DEBUG RWrapper:154 - Pre process time read = 6703
2017-03-12 09:34:15 DEBUG RWrapper:275 - Saving station data output time=14
2017-03-12 09:34:15 INFO  RWrapper:163 - Pre process execution time is 6718
Creating dados.csv for image LT52170641986204CUB00
Starting CPU and Memory collect...
Executing R script...
> rm(list=ls())
> 
> # for now, this will be here
> install.packages("snow", repos="http://nbcgib.uesc.br/mirrors/cran/")
During startup - Warning messages:
1: Setting LC_TIME failed, using "C" 
2: Setting LC_MONETARY failed, using "C" 
3: Setting LC_PAPER failed, using "C" 
4: Setting LC_MEASUREMENT failed, using "C" 

The downloaded source packages are in
	‘/tmp/RtmpTcsdXG/downloaded_packages’
> install.packages("R.utils", repos="http://nbcgib.uesc.br/mirrors/cran/")
During startup - Warning messages:
1: Setting LC_TIME failed, using "C" 
2: Setting LC_MONETARY failed, using "C" 
3: Setting LC_PAPER failed, using "C" 
4: Setting LC_MEASUREMENT failed, using "C" 

The downloaded source packages are in
	‘/tmp/RtmpTcsdXG/downloaded_packages’
> 
> library(R.utils)
> library(raster)
> library(rgdal)
> library(maptools)
> library(ncdf4)
> library(sp)
> args = commandArgs(trailingOnly=TRUE)
> WD<-args[1]
> setwd(WD) # Working Directory
> 
> # changing raster tmpdir
> rasterOptions(tmpdir="/mnt/rasterTmp")
> 
> source("landsat.R")
> dados <- read.csv("dados.csv",sep=";", stringsAsFactors=FALSE) # Data
> ####################################constantes##########################################
> clusters<-7    #Number of clusters used in image processing
> ######################### Reading sensor parameters#####################################
> p.s.TM1<- read.csv("parametros do sensor/parametrosdosensorTM1.csv"
+                    ,sep=";", stringsAsFactors=FALSE)
> p.s.TM2<- read.csv("parametros do sensor/parametrosdosensorTM2.csv"
+                    ,sep=";", stringsAsFactors=FALSE)
> p.s.ETM<-read.csv("parametros do sensor/parametrosdosensorETM.csv"
+                   ,sep=";", stringsAsFactors=FALSE)
> p.s.LC<- read.csv("parametros do sensor/parametrosdosensorLC.csv"
+                   ,sep=";", stringsAsFactors=FALSE)
> load("d_sun_earth.RData")             # Ler dist?ncia realtiva Sol a Terra
> 
> #Set projection and spatial resolution
> WGS84<- "+proj=longlat +datum=WGS84 +ellps=WGS84"
> 
> ######################### Image Information ######################################
> fic.dir<-dados$File.images[1]                     #Images file reading
> m<-nchar(dados$File.images)                       #Number of file characters
> fic<-substring(fic.dir,m[1]-20)                   #Image name that will be processed
> n.sensor<-as.numeric(substr(fic,3,3))             #Sensor Number
> WRSPR<-substr(fic,4,9)                            #WRSPR
> Ano<-as.numeric(substr(fic,10,13))                #Images year
> Dia.juliano<-as.numeric(substr(fic,14,16))        #Julian Day
> MTL<-read.table(dados$MTL[1],skip=0,nrows=130,sep="=", quote = "''",as.is=TRUE) #MTL File
> if (n.sensor==8) MTL<-read.table(dados$MTL[1],skip=0,nrows=180,sep="=", quote = "''",as.is=TRUE)
> sun_elevation<-as.numeric(MTL$V2[MTL$V1==grep(pattern ="SUN_ELEVATION",
+                                               MTL$V1, value = TRUE)])
> costheta<-sin(sun_elevation*pi/180)               #From SUN ELEVATION
> if (n.sensor==8) p.s<-p.s.LC
> if (n.sensor==7) p.s<-p.s.ETM
> if (Ano < 1992 & n.sensor==5) p.s<-p.s.TM1 
> if (Ano > 1992 & n.sensor==5) p.s<-p.s.TM2
> 
> #Time image
> acquired_date<-as.Date(MTL$V2[MTL$V1==grep(pattern ="DATE_ACQUIRED",MTL$V1, value = TRUE)])
> date1970<-as.Date("1970-01-01")
> date1970<-as.numeric(date1970) * 86400000
> acquired_date<-as.numeric(acquired_date) * 86400000
> daysSince1970 = (acquired_date - date1970)/(24*60*60*1000)
> tdim<-ncdim_def("time","days since 1970-1-1",daysSince1970,unlim=TRUE,create_dimvar=TRUE,"standard","time")
> 
> #Reading image file
> fichs.imagens <- list.files(path = fic.dir, pattern ="*.TIF", full.names = TRUE)
> if (n.sensor==8) fic.st <- stack(as.list(fichs.imagens[c(4:9,2)]))
> if (n.sensor==7) fic.st <- stack(as.list(fichs.imagens[1:8]))
> if (n.sensor==5) fic.st <- stack(as.list(fichs.imagens[1:7]))
> beginCluster(clusters)
> fic.st<-projectRaster(fic.st,crs = WGS84)            # change projection (UTM para GEO)
> endCluster()
> proc.time()
   user  system elapsed 
 94.900   7.552 131.301 
> 
> #Reading Bounding Box
> fic.bounding.boxes<-paste("wrs2_asc_desc/wrs2_asc_desc.shp")
> BoundingBoxes<-readShapePoly(fic.bounding.boxes,proj4string = CRS(WGS84))
> BoundingBox<-BoundingBoxes[BoundingBoxes@data$WRSPR==WRSPR,]
> 
> 
> #Reading Fmask
> Fmask <- raster(dados$File.Fmask[1])
> beginCluster(clusters)
> Fmask <- projectRaster(Fmask, crs = WGS84)
> endCluster()
> proc.time()
   user  system elapsed 
173.668  13.628 248.319 
> 
> #Reading Elevation
> fic.elevation<-paste("Elevation/srtm_29_14.tif")
> raster.elevation <- raster(fic.elevation)
> beginCluster(clusters)
> raster.elevation <- crop(raster.elevation,extent(BoundingBox))
> endCluster()
> proc.time()
   user  system elapsed 
174.788  13.936 256.586 
> 
> raster.elevation.aux<-raster(raster.elevation)
> res(raster.elevation.aux)<-res(Fmask)
> 
> # Resample images
> beginCluster(clusters)
> raster.elevation<-resample(raster.elevation,raster.elevation.aux,method="ngb")
> proc.time()
   user  system elapsed 
182.648  15.136 294.784 
> 
> # See if timeouts presented here will be the default or distinct between sites
> # timeout before = 2177.062
> # timeout now is 3600 (cause: Azure slowness)
> image.rec <- NULL;
> imageResample <- function() {
+   image_resample <- resample(fic.st,raster.elevation,method="ngb")
+   return(image_resample)
+ }
> 
> res <- NULL;
> tryCatch({
+   res <- evalWithTimeout({
+     image.rec <- imageResample();
+   }, timeout=3600);
+ }, TimeoutException=function(ex) {
+   cat("Image resample timedout. Exiting with 124 code...\n");
+   quit("no", 124, FALSE)
+ })
> 
> proc.time()
    user   system  elapsed 
 232.660   19.200 1532.718 
> 
> Fmask <- resample(Fmask,raster.elevation,method="ngb")
> endCluster()
> proc.time()
    user   system  elapsed 
 237.032   19.780 1714.981 
> 
> #Reading file Station weather
> fic.sw<-dados$File.Station.Weather[1]
> table.sw<-(read.csv(fic.sw,sep=";", header=FALSE, stringsAsFactors=FALSE))
> 
> #Transmissivity 
> tal<-0.75+2*10^-5*raster.elevation 
> proc.time()
    user   system  elapsed 
 259.212   22.140 1739.536 
> 
> #Processamento da Fase 1
> output <- NULL;
> outputLandsat <- function() {
+   output <- landsat()
+   return(output)
+ }
> 
> # timeout before = 2665.151
> # timeout now is 7200 (cause: Azure slowness)
> res <- NULL;
> tryCatch({
+   res <- evalWithTimeout({
+     output <- outputLandsat();
+   }, timeout=7200);
+ }, TimeoutException=function(ex) {
+   cat("Output landsat timedout. Exiting with 124 code...\n");
+   quit("no", 124, FALSE)
+ })
> 
> proc.time()
    user   system  elapsed 
2968.488  235.308 4668.410 
> 
> outputMask <- function() {
+   beginCluster(clusters)
+   output<-mask(output, BoundingBox)
+   endCluster()
+   return(output)
+ }
> 
> # timeout before = 1716.853
> # timeout now is 10800 (cause: Azure slowness)
> 
> res <- NULL;
> tryCatch({
+   res <- evalWithTimeout({
+     output <- outputMask();
+   }, timeout=10800);
+ }, TimeoutException=function(ex) {
+   cat("Output Fmask timedout. Exiting with 124 code...\n");
+   quit("no", 124, FALSE)
+ })
> 
> proc.time()
    user   system  elapsed 
7601.416  257.960 9337.060 
> 
> outputWriteRaster <- function() {
+   output[Fmask>1]<-NaN
+   names(output)<-c("Rn","TS","NDVI","EVI","LAI","G","alb")
+   output.path<-paste(dados$Path.Output[1],"/",fic,".nc",sep = "")
+   writeRaster(output,output.path, overwrite=TRUE, format="CDF", varname= fic,varunit="daily",
+             longname=fic, xname="lon",yname="lat",bylayer= TRUE, suffix="names")
+ }
> 
> # timeout before = 1708.507
> # timeout now is 10800 (cause: Azure slowness)
> 
> res <- NULL;
> tryCatch({
+   res <- evalWithTimeout({
+     outputWriteRaster();
+   }, timeout=10800);
+ }, TimeoutException=function(ex) {
+   cat("Output write raster timedout. Exiting with 124 code...\n");
+   quit("no", 124, FALSE)
+ })
> 
> proc.time()
    user   system  elapsed 
7995.756  271.368 9804.674 
> 
> #Opening old alb NetCDF
> var_output<-paste(dados$Path.Output,"/",fic,"_alb.nc",sep="")
> nc<-nc_open(var_output, write=TRUE,readunlim=FALSE,verbose=TRUE,auto_GMT=FALSE,suppress_dimvals=FALSE)
[1] "nc_open: entering, ncdf4 package version ncdf4_1.15_20151203"
[1] "nc_open: back from call to R_nc4_open, ncid= 65536"
[1] "file /nfs/results//LT52170641986204CUB00/LT52170641986204CUB00_alb.nc is format NC_FORMAT_CLASSIC"
[1] "Group info:"
[1] "Group 1 :  name=  id= 65536 fqgn= \"  \" nvars= 3 ndims= 2 dimid="
[1] 0 1
[1] "nc_open: getting dim info for dim number 1 in group \"  \" dim ID= 0"
[1] ".....dim name is lon   id= 0   len= 5255      dimvarid= 0"
[1] "nc_open: getting dimvar info for dim  lon"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 0"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 5255
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 5255
[1] "ncvar_get: totvarsize: 5255"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 5255    Length of data: 5255"
[1] "ncvar_get: final dims of returned array:"
[1] 5255
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 1 name= lon len= 5255 unlim= FALSE id= 0 dimvarid= 0 units= degrees_east"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lon"
[1] "nc_open: getting dim info for dim number 2 in group \"  \" dim ID= 1"
[1] ".....dim name is lat   id= 1   len= 6150      dimvarid= 1"
[1] "nc_open: getting dimvar info for dim  lat"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 1"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 6150
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 6150
[1] "ncvar_get: totvarsize: 6150"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 6150    Length of data: 6150"
[1] "ncvar_get: final dims of returned array:"
[1] 6150
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 2 name= lat len= 6150 unlim= FALSE id= 1 dimvarid= 1 units= degrees_north"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lat"
[1] "nc_open: setting dim$<names> to:"
[1] "lon" "lat"
[1] "nc_open: getting var info.  Number of vars (INCLUDING dimvars)= 3"
[1] "Working on group 1 (of 1 ), var 1 (of 3 ), name= lon"
[1] "Working on group 1 (of 1 ), var 2 (of 3 ), name= lat"
[1] "Working on group 1 (of 1 ), var 3 (of 3 ), name= LT52170641986204CUB00"
[1] "nc_open var loop: will process with group id= 65536  varid= 3   var name= LT52170641986204CUB00"
[1] "-----------------------"
[1] "Here is new var:"
[1] "name= LT52170641986204CUB00   group_id= 65536   id= 2    ndims= 2    prec= float"
[1] "size="
[1] 5255 6150
[1] "dimids="
[1] 0 1
[1] "nc_open: leaving for ncid= 65536"
> proc.time()
    user   system  elapsed 
7995.764  271.368 9804.688 
> 
> #Getting lat and lon values from old NetCDF
> oldLat<-ncvar_get(nc,"lat",start=1,count=raster.elevation@nrows)
> oldLon<-ncvar_get(nc,"lon",start=1,count=raster.elevation@ncols)
> 
> #Defining latitude and longitude dimensions
> dimLatDef<-ncdim_def("lat","degrees",oldLat,unlim=FALSE,longname="latitude")
> dimLonDef<-ncdim_def("lon","degrees",oldLon,unlim=FALSE,longname="longitude")
> proc.time()
    user   system  elapsed 
7995.768  271.368 9804.691 
> 
> #New alb file name
> file_output<-paste(dados$Path.Output[1],"/",fic,"_alb.nc",sep="")
> oldAlbValues<-ncvar_get(nc,fic)
> newAlbValues<-ncvar_def("alb","daily",list(dimLonDef,dimLatDef,tdim),longname="alb",missval=NaN, prec="double")
> nc_close(nc)
> newAlbNCDF4<-nc_create(file_output,newAlbValues)
> ncvar_put(newAlbNCDF4,"alb",oldAlbValues,start=c(1,1,1),count=c(raster.elevation@ncols,raster.elevation@nrows,1))
> nc_close(newAlbNCDF4)
> proc.time()
    user   system  elapsed 
7997.252  271.884 9808.518 
> 
> #Opening old EVI NetCDF
> var_output<-paste(dados$Path.Output[1],"/",fic,"_EVI.nc",sep="")
> nc<-nc_open(var_output, write=TRUE,readunlim=FALSE,verbose=TRUE,auto_GMT=FALSE,suppress_dimvals=FALSE)
[1] "nc_open: entering, ncdf4 package version ncdf4_1.15_20151203"
[1] "nc_open: back from call to R_nc4_open, ncid= 65536"
[1] "file /nfs/results//LT52170641986204CUB00/LT52170641986204CUB00_EVI.nc is format NC_FORMAT_CLASSIC"
[1] "Group info:"
[1] "Group 1 :  name=  id= 65536 fqgn= \"  \" nvars= 3 ndims= 2 dimid="
[1] 0 1
[1] "nc_open: getting dim info for dim number 1 in group \"  \" dim ID= 0"
[1] ".....dim name is lon   id= 0   len= 5255      dimvarid= 0"
[1] "nc_open: getting dimvar info for dim  lon"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 0"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 5255
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 5255
[1] "ncvar_get: totvarsize: 5255"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 5255    Length of data: 5255"
[1] "ncvar_get: final dims of returned array:"
[1] 5255
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 1 name= lon len= 5255 unlim= FALSE id= 0 dimvarid= 0 units= degrees_east"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lon"
[1] "nc_open: getting dim info for dim number 2 in group \"  \" dim ID= 1"
[1] ".....dim name is lat   id= 1   len= 6150      dimvarid= 1"
[1] "nc_open: getting dimvar info for dim  lat"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 1"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 6150
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 6150
[1] "ncvar_get: totvarsize: 6150"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 6150    Length of data: 6150"
[1] "ncvar_get: final dims of returned array:"
[1] 6150
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 2 name= lat len= 6150 unlim= FALSE id= 1 dimvarid= 1 units= degrees_north"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lat"
[1] "nc_open: setting dim$<names> to:"
[1] "lon" "lat"
[1] "nc_open: getting var info.  Number of vars (INCLUDING dimvars)= 3"
[1] "Working on group 1 (of 1 ), var 1 (of 3 ), name= lon"
[1] "Working on group 1 (of 1 ), var 2 (of 3 ), name= lat"
[1] "Working on group 1 (of 1 ), var 3 (of 3 ), name= LT52170641986204CUB00"
[1] "nc_open var loop: will process with group id= 65536  varid= 3   var name= LT52170641986204CUB00"
[1] "-----------------------"
[1] "Here is new var:"
[1] "name= LT52170641986204CUB00   group_id= 65536   id= 2    ndims= 2    prec= float"
[1] "size="
[1] 5255 6150
[1] "dimids="
[1] 0 1
[1] "nc_open: leaving for ncid= 65536"
> 
> #New EVI file name
> file_output<-paste(dados$Path.Output[1],"/",fic,"_EVI.nc",sep="")
> oldEVIValues<-ncvar_get(nc,fic)
> newEVIValues<-ncvar_def("EVI","daily",list(dimLonDef,dimLatDef,tdim),longname="EVI",missval=NaN,prec="double")
> nc_close(nc)
> newEVINCDF4<-nc_create(file_output,newEVIValues)
> ncvar_put(newEVINCDF4,"EVI",oldEVIValues,start=c(1,1,1),count=c(raster.elevation@ncols,raster.elevation@nrows,1))
> nc_close(newEVINCDF4)
> proc.time()
    user   system  elapsed 
7999.228  272.388 9813.867 
> 
> #Opening old G NetCDF
> var_output<-paste(dados$Path.Output[1],"/",fic,"_G.nc",sep="")
> nc<-nc_open(var_output, write=TRUE,readunlim=FALSE,verbose=TRUE,auto_GMT=FALSE,suppress_dimvals=FALSE)
[1] "nc_open: entering, ncdf4 package version ncdf4_1.15_20151203"
[1] "nc_open: back from call to R_nc4_open, ncid= 65536"
[1] "file /nfs/results//LT52170641986204CUB00/LT52170641986204CUB00_G.nc is format NC_FORMAT_CLASSIC"
[1] "Group info:"
[1] "Group 1 :  name=  id= 65536 fqgn= \"  \" nvars= 3 ndims= 2 dimid="
[1] 0 1
[1] "nc_open: getting dim info for dim number 1 in group \"  \" dim ID= 0"
[1] ".....dim name is lon   id= 0   len= 5255      dimvarid= 0"
[1] "nc_open: getting dimvar info for dim  lon"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 0"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 5255
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 5255
[1] "ncvar_get: totvarsize: 5255"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 5255    Length of data: 5255"
[1] "ncvar_get: final dims of returned array:"
[1] 5255
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 1 name= lon len= 5255 unlim= FALSE id= 0 dimvarid= 0 units= degrees_east"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lon"
[1] "nc_open: getting dim info for dim number 2 in group \"  \" dim ID= 1"
[1] ".....dim name is lat   id= 1   len= 6150      dimvarid= 1"
[1] "nc_open: getting dimvar info for dim  lat"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 1"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 6150
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 6150
[1] "ncvar_get: totvarsize: 6150"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 6150    Length of data: 6150"
[1] "ncvar_get: final dims of returned array:"
[1] 6150
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 2 name= lat len= 6150 unlim= FALSE id= 1 dimvarid= 1 units= degrees_north"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lat"
[1] "nc_open: setting dim$<names> to:"
[1] "lon" "lat"
[1] "nc_open: getting var info.  Number of vars (INCLUDING dimvars)= 3"
[1] "Working on group 1 (of 1 ), var 1 (of 3 ), name= lon"
[1] "Working on group 1 (of 1 ), var 2 (of 3 ), name= lat"
[1] "Working on group 1 (of 1 ), var 3 (of 3 ), name= LT52170641986204CUB00"
[1] "nc_open var loop: will process with group id= 65536  varid= 3   var name= LT52170641986204CUB00"
[1] "-----------------------"
[1] "Here is new var:"
[1] "name= LT52170641986204CUB00   group_id= 65536   id= 2    ndims= 2    prec= float"
[1] "size="
[1] 5255 6150
[1] "dimids="
[1] 0 1
[1] "nc_open: leaving for ncid= 65536"
> 
> #New G file name
> file_output<-paste(dados$Path.Output[1],"/",fic,"_G.nc",sep="")
> oldGValues<-ncvar_get(nc,fic)
> newGValues<-ncvar_def("G","daily",list(dimLonDef,dimLatDef,tdim),longname="G",missval=NaN,prec="double")
> nc_close(nc)
> newGNCDF4<-nc_create(file_output,newGValues)
> ncvar_put(newGNCDF4,"G",oldGValues,start=c(1,1,1),count=c(raster.elevation@ncols,raster.elevation@nrows,1))
> nc_close(newGNCDF4)
> proc.time()
    user   system  elapsed 
8001.280  272.892 9819.313 
> 
> #Opening old LAI NetCDF
> var_output<-paste(dados$Path.Output[1],"/",fic,"_LAI.nc",sep="")
> nc<-nc_open(var_output, write=TRUE,readunlim=FALSE,verbose=TRUE,auto_GMT=FALSE,suppress_dimvals=FALSE)
[1] "nc_open: entering, ncdf4 package version ncdf4_1.15_20151203"
[1] "nc_open: back from call to R_nc4_open, ncid= 65536"
[1] "file /nfs/results//LT52170641986204CUB00/LT52170641986204CUB00_LAI.nc is format NC_FORMAT_CLASSIC"
[1] "Group info:"
[1] "Group 1 :  name=  id= 65536 fqgn= \"  \" nvars= 3 ndims= 2 dimid="
[1] 0 1
[1] "nc_open: getting dim info for dim number 1 in group \"  \" dim ID= 0"
[1] ".....dim name is lon   id= 0   len= 5255      dimvarid= 0"
[1] "nc_open: getting dimvar info for dim  lon"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 0"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 5255
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 5255
[1] "ncvar_get: totvarsize: 5255"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 5255    Length of data: 5255"
[1] "ncvar_get: final dims of returned array:"
[1] 5255
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 1 name= lon len= 5255 unlim= FALSE id= 0 dimvarid= 0 units= degrees_east"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lon"
[1] "nc_open: getting dim info for dim number 2 in group \"  \" dim ID= 1"
[1] ".....dim name is lat   id= 1   len= 6150      dimvarid= 1"
[1] "nc_open: getting dimvar info for dim  lat"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 1"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 6150
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 6150
[1] "ncvar_get: totvarsize: 6150"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 6150    Length of data: 6150"
[1] "ncvar_get: final dims of returned array:"
[1] 6150
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 2 name= lat len= 6150 unlim= FALSE id= 1 dimvarid= 1 units= degrees_north"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lat"
[1] "nc_open: setting dim$<names> to:"
[1] "lon" "lat"
[1] "nc_open: getting var info.  Number of vars (INCLUDING dimvars)= 3"
[1] "Working on group 1 (of 1 ), var 1 (of 3 ), name= lon"
[1] "Working on group 1 (of 1 ), var 2 (of 3 ), name= lat"
[1] "Working on group 1 (of 1 ), var 3 (of 3 ), name= LT52170641986204CUB00"
[1] "nc_open var loop: will process with group id= 65536  varid= 3   var name= LT52170641986204CUB00"
[1] "-----------------------"
[1] "Here is new var:"
[1] "name= LT52170641986204CUB00   group_id= 65536   id= 2    ndims= 2    prec= float"
[1] "size="
[1] 5255 6150
[1] "dimids="
[1] 0 1
[1] "nc_open: leaving for ncid= 65536"
> 
> #New LAI file name
> file_output<-paste(dados$Path.Output[1],"/",fic,"_LAI.nc",sep="")
> oldLAIValues<-ncvar_get(nc,fic)
> newLAIValues<-ncvar_def("LAI","daily",list(dimLonDef,dimLatDef,tdim),longname="LAI",missval=NaN,prec="double")
> nc_close(nc)
> newLAINCDF4<-nc_create(file_output,newLAIValues)
> ncvar_put(newLAINCDF4,"LAI",oldLAIValues,start=c(1,1,1),count=c(raster.elevation@ncols,raster.elevation@nrows,1))
> nc_close(newLAINCDF4)
> proc.time()
    user   system  elapsed 
8003.676  273.372 9824.359 
> 
> #Opening old NDVI NetCDF
> var_output<-paste(dados$Path.Output[1],"/",fic,"_NDVI.nc",sep="")
> nc<-nc_open(var_output, write=TRUE,readunlim=FALSE,verbose=TRUE,auto_GMT=FALSE,suppress_dimvals=FALSE)
[1] "nc_open: entering, ncdf4 package version ncdf4_1.15_20151203"
[1] "nc_open: back from call to R_nc4_open, ncid= 65536"
[1] "file /nfs/results//LT52170641986204CUB00/LT52170641986204CUB00_NDVI.nc is format NC_FORMAT_CLASSIC"
[1] "Group info:"
[1] "Group 1 :  name=  id= 65536 fqgn= \"  \" nvars= 3 ndims= 2 dimid="
[1] 0 1
[1] "nc_open: getting dim info for dim number 1 in group \"  \" dim ID= 0"
[1] ".....dim name is lon   id= 0   len= 5255      dimvarid= 0"
[1] "nc_open: getting dimvar info for dim  lon"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 0"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 5255
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 5255
[1] "ncvar_get: totvarsize: 5255"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 5255    Length of data: 5255"
[1] "ncvar_get: final dims of returned array:"
[1] 5255
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 1 name= lon len= 5255 unlim= FALSE id= 0 dimvarid= 0 units= degrees_east"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lon"
[1] "nc_open: getting dim info for dim number 2 in group \"  \" dim ID= 1"
[1] ".....dim name is lat   id= 1   len= 6150      dimvarid= 1"
[1] "nc_open: getting dimvar info for dim  lat"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 1"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 6150
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 6150
[1] "ncvar_get: totvarsize: 6150"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 6150    Length of data: 6150"
[1] "ncvar_get: final dims of returned array:"
[1] 6150
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 2 name= lat len= 6150 unlim= FALSE id= 1 dimvarid= 1 units= degrees_north"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lat"
[1] "nc_open: setting dim$<names> to:"
[1] "lon" "lat"
[1] "nc_open: getting var info.  Number of vars (INCLUDING dimvars)= 3"
[1] "Working on group 1 (of 1 ), var 1 (of 3 ), name= lon"
[1] "Working on group 1 (of 1 ), var 2 (of 3 ), name= lat"
[1] "Working on group 1 (of 1 ), var 3 (of 3 ), name= LT52170641986204CUB00"
[1] "nc_open var loop: will process with group id= 65536  varid= 3   var name= LT52170641986204CUB00"
[1] "-----------------------"
[1] "Here is new var:"
[1] "name= LT52170641986204CUB00   group_id= 65536   id= 2    ndims= 2    prec= float"
[1] "size="
[1] 5255 6150
[1] "dimids="
[1] 0 1
[1] "nc_open: leaving for ncid= 65536"
> 
> #New NDVI file name
> file_output<-paste(dados$Path.Output[1],"/",fic,"_NDVI.nc",sep="")
> oldNDVIValues<-ncvar_get(nc,fic)
> newNDVIValues<-ncvar_def("NDVI","daily",list(dimLonDef,dimLatDef,tdim),longname="NDVI",missval=NaN,prec="double")
> nc_close(nc)
> newNDVINCDF4<-nc_create(file_output,newNDVIValues)
> ncvar_put(newNDVINCDF4,"NDVI",oldNDVIValues,start=c(1,1,1),count=c(raster.elevation@ncols,raster.elevation@nrows,1))
> nc_close(newNDVINCDF4)
> proc.time()
    user   system  elapsed 
8007.376  273.872 9830.394 
> 
> #Opening old Rn NetCDF
> var_output<-paste(dados$Path.Output[1],"/",fic,"_Rn.nc",sep="")
> nc<-nc_open(var_output, write=TRUE,readunlim=FALSE,verbose=TRUE,auto_GMT=FALSE,suppress_dimvals=FALSE)
[1] "nc_open: entering, ncdf4 package version ncdf4_1.15_20151203"
[1] "nc_open: back from call to R_nc4_open, ncid= 65536"
[1] "file /nfs/results//LT52170641986204CUB00/LT52170641986204CUB00_Rn.nc is format NC_FORMAT_CLASSIC"
[1] "Group info:"
[1] "Group 1 :  name=  id= 65536 fqgn= \"  \" nvars= 3 ndims= 2 dimid="
[1] 0 1
[1] "nc_open: getting dim info for dim number 1 in group \"  \" dim ID= 0"
[1] ".....dim name is lon   id= 0   len= 5255      dimvarid= 0"
[1] "nc_open: getting dimvar info for dim  lon"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 0"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 5255
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 5255
[1] "ncvar_get: totvarsize: 5255"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 5255    Length of data: 5255"
[1] "ncvar_get: final dims of returned array:"
[1] 5255
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 1 name= lon len= 5255 unlim= FALSE id= 0 dimvarid= 0 units= degrees_east"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lon"
[1] "nc_open: getting dim info for dim number 2 in group \"  \" dim ID= 1"
[1] ".....dim name is lat   id= 1   len= 6150      dimvarid= 1"
[1] "nc_open: getting dimvar info for dim  lat"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 1"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 6150
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 6150
[1] "ncvar_get: totvarsize: 6150"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 6150    Length of data: 6150"
[1] "ncvar_get: final dims of returned array:"
[1] 6150
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 2 name= lat len= 6150 unlim= FALSE id= 1 dimvarid= 1 units= degrees_north"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lat"
[1] "nc_open: setting dim$<names> to:"
[1] "lon" "lat"
[1] "nc_open: getting var info.  Number of vars (INCLUDING dimvars)= 3"
[1] "Working on group 1 (of 1 ), var 1 (of 3 ), name= lon"
[1] "Working on group 1 (of 1 ), var 2 (of 3 ), name= lat"
[1] "Working on group 1 (of 1 ), var 3 (of 3 ), name= LT52170641986204CUB00"
[1] "nc_open var loop: will process with group id= 65536  varid= 3   var name= LT52170641986204CUB00"
[1] "-----------------------"
[1] "Here is new var:"
[1] "name= LT52170641986204CUB00   group_id= 65536   id= 2    ndims= 2    prec= float"
[1] "size="
[1] 5255 6150
[1] "dimids="
[1] 0 1
[1] "nc_open: leaving for ncid= 65536"
> 
> #New Rn file name
> file_output<-paste(dados$Path.Output[1],"/",fic,"_Rn.nc",sep="")
> oldRnValues<-ncvar_get(nc,fic)
> newRnValues<-ncvar_def("Rn","daily",list(dimLonDef,dimLatDef,tdim),longname="Rn",missval=NaN,prec="double")
> nc_close(nc)
> newRnNCDF4<-nc_create(file_output,newRnValues)
> ncvar_put(newRnNCDF4,"Rn",oldRnValues,start=c(1,1,1),count=c(raster.elevation@ncols,raster.elevation@nrows,1))
> nc_close(newRnNCDF4)
> proc.time()
    user   system  elapsed 
8010.848  274.320 9836.146 
> 
> #Opening old TS NetCDF
> var_output<-paste(dados$Path.Output[1],"/",fic,"_TS.nc",sep="")
> nc<-nc_open(var_output, write=TRUE,readunlim=FALSE,verbose=TRUE,auto_GMT=FALSE,suppress_dimvals=FALSE)
[1] "nc_open: entering, ncdf4 package version ncdf4_1.15_20151203"
[1] "nc_open: back from call to R_nc4_open, ncid= 65536"
[1] "file /nfs/results//LT52170641986204CUB00/LT52170641986204CUB00_TS.nc is format NC_FORMAT_CLASSIC"
[1] "Group info:"
[1] "Group 1 :  name=  id= 65536 fqgn= \"  \" nvars= 3 ndims= 2 dimid="
[1] 0 1
[1] "nc_open: getting dim info for dim number 1 in group \"  \" dim ID= 0"
[1] ".....dim name is lon   id= 0   len= 5255      dimvarid= 0"
[1] "nc_open: getting dimvar info for dim  lon"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 0"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 5255
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 5255
[1] "ncvar_get: totvarsize: 5255"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 5255    Length of data: 5255"
[1] "ncvar_get: final dims of returned array:"
[1] 5255
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 1 name= lon len= 5255 unlim= FALSE id= 0 dimvarid= 0 units= degrees_east"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lon"
[1] "nc_open: getting dim info for dim number 2 in group \"  \" dim ID= 1"
[1] ".....dim name is lat   id= 1   len= 6150      dimvarid= 1"
[1] "nc_open: getting dimvar info for dim  lat"
[1] "ncvar_get_inner: entering with (C-STYLE INTEGER ONLY) ncid= 65536 varid= 1"
[1] "ncvar_get_inner: following line is collapse_degen:"
[1] TRUE
[1] "ndims: 1"
[1] "ncvar_get: varsize:"
[1] 6150
[1] "ncvar_get: start:"
[1] 1
[1] "ncvar_get: count:"
[1] 6150
[1] "ncvar_get: totvarsize: 6150"
[1] "ncvar_get_inner: getting var of type double id= 4"
[1] "ncvar_get_inner: C call returned 0"
[1] "ncvar_get_inner: dim of directly returned array:"
NULL
[1] "count.nodegen: 6150    Length of data: 6150"
[1] "ncvar_get: final dims of returned array:"
[1] 6150
[1] "------------------------------"
[1] "Here is new dim:"
[1] "Global index= 2 name= lat len= 6150 unlim= FALSE id= 1 dimvarid= 1 units= degrees_north"
[1] "------------------------------"
[1] ".......nc_open: done processing dim  lat"
[1] "nc_open: setting dim$<names> to:"
[1] "lon" "lat"
[1] "nc_open: getting var info.  Number of vars (INCLUDING dimvars)= 3"
[1] "Working on group 1 (of 1 ), var 1 (of 3 ), name= lon"
[1] "Working on group 1 (of 1 ), var 2 (of 3 ), name= lat"
[1] "Working on group 1 (of 1 ), var 3 (of 3 ), name= LT52170641986204CUB00"
[1] "nc_open var loop: will process with group id= 65536  varid= 3   var name= LT52170641986204CUB00"
[1] "-----------------------"
[1] "Here is new var:"
[1] "name= LT52170641986204CUB00   group_id= 65536   id= 2    ndims= 2    prec= float"
[1] "size="
[1] 5255 6150
[1] "dimids="
[1] 0 1
[1] "nc_open: leaving for ncid= 65536"
> 
> #New TS file name
> file_output<-paste(dados$Path.Output[1],"/",fic,"_TS.nc",sep="")
> oldTSValues<-ncvar_get(nc,fic)
> newTSValues<-ncvar_def("TS","daily",list(dimLonDef,dimLatDef,tdim),longname="TS",missval=NaN,prec="double")
> nc_close(nc)
> newTSNCDF4<-nc_create(file_output,newTSValues)
> ncvar_put(newTSNCDF4,"TS",oldTSValues,start=c(1,1,1),count=c(raster.elevation@ncols,raster.elevation@nrows,1))
> nc_close(newTSNCDF4)
> proc.time()
    user   system  elapsed 
8014.068  274.852 9842.770 
> 
RScript_process_output=0
executeRScript_process_output=0
NUMBER OF TRIES 1
Moving temporary out and err files
