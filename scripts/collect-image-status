#!/bin/bash

function calculateMakespan {
	queued_lastupdate_file="min_queued_lastupdate.txt"
	finished_lastupdate_file="max_finished_lastupdate"
	MIN_QUEUED_LASTUPDATE=`cat "$queued_lastupdate_file"`
	MAX_FINISHED_LASTUPDATE=`cat "$finished_lastupdate_file"`
	expr $MAX_FINISHED_LASTUPDATE - $MIN_QUEUED_LASTUPDATE
}

function getImagesStatus {
	#Geting info about db
	ip=$scheduler_ip
	port=$scheduler_db_port
	db_name=$sebal_db_name
	db_username=$sebal_db_user
	db_password=$sebal_db_password

	# Setting password to access db
	file="$HOME/.pgpass"
	if [ -f "$file" ]
	then
	    ## echo "File $file already exists. Replacing deleting now."
	    rm -f $file
	fi

	#Writing password in .pgpass and changing permissions
	echo "$ip:$port:$db_name:$db_username:$db_password" >> $file
	chmod 0600 "$HOME/.pgpass"

	#Erasing files that are not required anymore (it is safer to clean before use)
	rm running.csv 2> /dev/null
	rm finished.csv 2> /dev/null
	rm queued.csv 2> /dev/null
	rm all_images_status.csv 2> /dev/null

	# Generating CSV files for result of the queries
	psql -h $ip -U $db_username -c "COPY (SELECT image_name, state, utime, federation_member FROM nasa_images WHERE state = 'queued') TO STDOUT WITH CSV" $db_name >> queued.csv
	psql -h $ip -U $db_username -c "COPY (SELECT image_name, state, utime, federation_member FROM nasa_images WHERE state = 'finished') TO STDOUT WITH CSV" $db_name >> finished.csv
	psql -h $ip -U $db_username -c "COPY (SELECT image_name, state, utime, federation_member FROM nasa_images WHERE state = 'running') TO STDOUT WITH CSV" $db_name >> running.csv
	psql -h $ip -U $db_username -c "COPY (SELECT image_name, state, utime, federation_member FROM nasa_images) TO STDOUT WITH CSV" $db_name >> all_images_status.csv

	#Variables that are going to be checked after query in the database
	running=$(cat running.csv | sed '/^\s*#/d;/^\s*$/d' | wc -l)
	finished=$(cat finished.csv | sed '/^\s*#/d;/^\s*$/d' | wc -l)
	queued=$(cat queued.csv | sed '/^\s*#/d;/^\s*$/d' | wc -l)
	all_images=$(cat all_images_status.csv | sed '/^\s*#/d;/^\s*$/d' | wc -l)

	if [[ $all_images == $queued ]]; then
		queued_lastupdate_file="min_queued_lastupdate.txt"
		rm "$queued_lastupdate_file" 2> /dev/null
		MIN_QUEUED_LASTUPDATE=`psql -h $ip -U $db_username -c "COPY (SELECT MIN(utime) FROM nasa_images WHERE state = 'queued') TO STDOUT" $db_name`
		date --date="$MIN_QUEUED_LASTUPDATE" +"%s" > "$queued_lastupdate_file"
	fi

	#Condition to give status of the images
	if [ $all_images == 0 ]
	then
	    echo "Idle"  
	elif [[ $running > 0 || $queued > 0 ]]
	then
	    echo "Running" 
	elif [[ $finished > 0 && $all_images == $finished ]]
	then
	    echo "Done"
	    finished_lastupdate_file="max_finished_lastupdate.txt"
		rm "$finished_lastupdate_file" 2> /dev/null
		MAX_FINISHED_LASTUPDATE=`psql -h $ip -U $db_username -c "COPY (SELECT MAX(utime) FROM nasa_images WHERE state = 'finished') TO STDOUT" $db_name` 
		date --date="$MAX_FINISHED_LASTUPDATE" +"%s" > "$finished_lastupdate_file"
	else
	    echo "ERROR: Not possible to provide the state of the images"
	fi

	#Erasing files that are not required anymore
	rm running.csv
	rm finished.csv
	rm queued.csv
	rm all_images_status.csv
}
